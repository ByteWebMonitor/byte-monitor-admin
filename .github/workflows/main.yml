name: Continuous Deploy #action名称
on:
  push: #在推送的时候运行此action
    branches:
      - main
  pull_request: #在合并pr的时候运行此action
    branches:
      - main
jobs:
  deploy_job:
    runs-on: ubuntu-latest  #运行环境
    name: build
    steps:
      #这里使用了github官方提供的action,checkout项目到虚拟机上
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cache dependencies
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      # 如果缓存没有命中，安装依赖
      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile
      - name: Build
        run: yarn build
      # zip压缩
      - name: zip
        run: zip -r build.zip build/*
      # deploy
      - name: echo service_id to shell
        run: echo ${{ secrets.QINGFUWU_SERVICE_ID }} >> ./deploy.sh
      - name: echo token_id to shell
        run: echo ${{ secrets.QINGFUWU_TOKEN_ID }} >> ./deploy.sh
      - name: echo command to shell
        run: echo "curl -X POST open.qingfuwu.cn/v1/services/\$service_id/hosting/versions -H \"Authorization:Bearer \$token_id\" -F 'file=@./build.zip'" >> ./deploy.sh
      - name: bash shell
        run: bash ./deploy.sh
#      # 利用action把build好的文件上传到服务器/var/www/react-app路径下,需要确认此目录已在服务端创建
#      - name: deploy file to server
#        uses: wlixcc/SFTP-Deploy-Action@v1.0
#        with:
#          username: 'root' #ssh user name
#          server: ${{ secrets.SERVER_IP }} #引用之前创建好的secret
#          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }} #引用之前创建好的secret
#          local_path: './build/*'  # 对应我们项目build的文件夹路径
#          remote_path: '/home/service/nginx/static/monitor'
